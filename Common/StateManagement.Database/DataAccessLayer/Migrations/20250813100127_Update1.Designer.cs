// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StateManagement.Database.DataAccessLayer.Data;

#nullable disable

namespace StateManagement.Database.DataAccessLayer.Migrations
{
    [DbContext(typeof(OrchestrationDbContext))]
    [Migration("20250813100127_Update1")]
    partial class Update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessRequest", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestId"));

                    b.Property<string>("ExternalRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("ExternalRequestId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProcessStateRequests__ExternalRequestId");

                    b.HasIndex("RequestDateTime")
                        .HasDatabaseName("IX_ProcessStateRequests__RequestDateTime");

                    b.ToTable("ProcessRequests", "Orchestration");
                });

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponseBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.HasIndex("RequestId");

                    b.ToTable("ProcessResponses", "Orchestration");
                });

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessState", b =>
                {
                    b.Property<long>("ProcessStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProcessStateId"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreateRequestId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<short>("LockTimeoutInSeconds")
                        .HasColumnType("smallint");

                    b.Property<string>("ProcessData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProcessTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersionStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProcessStateId");

                    b.HasIndex("CreateRequestId")
                        .HasDatabaseName("IX_ProcessStates__CreateRequestId_BrandId");

                    b.HasIndex("LastModifiedDateTime")
                        .HasDatabaseName("IX_ProcessStates__LastModifiedDateTime");

                    b.ToTable("ProcessStates", "Orchestration");
                });

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessResponse", b =>
                {
                    b.HasOne("StateManagement.Database.DataAccessLayer.Contracts.ProcessRequest", "ProcessRequest")
                        .WithMany("ProcessResponses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessRequest");
                });

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessState", b =>
                {
                    b.HasOne("StateManagement.Database.DataAccessLayer.Contracts.ProcessRequest", "CreateRequest")
                        .WithMany("ProcessStates")
                        .HasForeignKey("CreateRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateRequest");
                });

            modelBuilder.Entity("StateManagement.Database.DataAccessLayer.Contracts.ProcessRequest", b =>
                {
                    b.Navigation("ProcessResponses");

                    b.Navigation("ProcessStates");
                });
#pragma warning restore 612, 618
        }
    }
}
